
> mime-db@1.4.0 update c:\Users\doug.wilson\Documents\GitHub\nodejs-mime-db
> gnode scripts/extensions && gnode scripts/types && node scripts/build

application/A2L ======> binary (UTF-8, UTF-16, UTF-32)
application/AML ======> binary (UTF-8, UTF-16, UTF-32)
template application/cals-1840 not found
application/cybercash ======> CyberCash messages are currently in 7 bit US-ASCII with limited line lengths. Some message types are quite readable but many include within them some digital signature information and many have large portions encrypted. This signature and/or encrypted information is essentially binary and is currently base64 encoded in certain fields. In the future, CyberCash messages may be extended to include a more extended set of byte values in which case a Content-Transfer-Encoding of other than 7bit will be required.
application/dicom ======> The DICOM information is binary, therefore the encoding used shall support lossless transfer of binary information. Typically, the Content-Transfer-Encoding would be set to "Base64".
application/fastinfoset ======> XML infosets encoded as fast infoset documents will result in the production of binary data. This MIME media type may require further encoding on transports not capable of handling binary data.
application/fdt+xml ======> binary (the FLUTE file delivery protocol does not impose any restriction on the objects it carries and in particular on the FDT Instance itself)
application/http ======> HTTP messages enclosed by this type are in "binary" format; use of an appropriate Content-Transfer-Encoding is required when transmitted via E-mail.
application/link-format ======> Binary data (UTF-8)
template application/mbox+xml not found
application/mikey ======> binary, base64 encoded
template application/oscp-response not found
application/nss ======> binary (Note: Data is in US-ASCII range.)
application/p2p-overlay+xml ======> Must be binary encoded.
application/sdp ======> SDP files are primarily UTF-8 format text.  The "a=charset:" attribute may be used to signal the presence of other character sets in certain parts of an SDP file (see Section 6 of RFC 4566).  Arbitrary binary content cannot be directly represented in SDP.
application/simple-message-summary ======> This MIME type was designed for use with protocols which can carry binary-encoded data. Although the format of this MIME type is similar to RFC 2822, it is not identical. (Specifically, line folding rules are SIP-specific and included URIs can contain non-ASCII characters.) Protocols which do not carry binary data (which have line length or character-set restrictions for example) MUST use a reversible transfer encoding (such as base64) to carry this MIME type.
application/sql ======> If the "charset" parameter is used, the corresponding 7-bit, 8-bit, or binary encoding may be used.  If the "charset" parameter is not used, binary encoding may be required.
application/vnd.amundsen.maze+xml ======> binary Same as encoding considerations of application/xml as specified in RFC 3023.
application/vnd.bmi ======> BMI data contains ASCII 8bit data and binary data. Almost all data is in ASCII format. The length of any binary blocks is restricted to 512 bytes.
application/vnd.canon-cpdl ======> CPDL(Canon's PDL)files consists of the command code for printers processed by pages. They may additionally contain text data or binary data such as images and should be encoded using Content-Transfer-Encoding base64.
application/vnd.canon-lips ======> LIPS(LBP Image Processing System)files consists of the command code for printers processed by pages. They may additionally contain text data or binary data such as images and should be encoded using Content-Transfer-Encoding base64.
application/vnd.claymore ======> None, its Binary.
application/vnd.ctct.ws+xml ======> This media type MAY be encoded as appropriate for the charset and the capabilities of the underlying MIME transport. For 7-bit transports, data in either UTF-8 or UTF-16 MUST be encoded in quoted-printable or base64. For 8-bit clean transport (e.g., 8BITMIME[RFC1652] ESMTP or NNTP[RFC0977]), UTF-8 is not encoded, but the UTF-16 family MUST be encoded in base64. For binary clean transports (e.g., HTTP[RFC2616]), no content-transfer-encoding is necessary.
application/vnd.cups-postscript ======> PostScript data of this format must consist only of characters in the ASCII character set. 8-bit or "binary" data is not acceptable due to the poor support over parallel and serial interfaces.  In addition, PostScript files tagged with this format MUST conform to the Adobe Document Structuring Conventions, Version 3.0.
application/vnd.dna ======> We are transferring binary data.
application/vnd.emclient.accessrequest+xml ======> This media type MAY be encoded as appropriate for the charset and the capabilities of the underlying MIME transport. For 7-bit transports, data in either UTF-8 or UTF-16 MUST be encoded in quoted-printable or base64. For 8-bit clean transport (e.g., 8BITMIME[RFC1652] ESMTP or NNTP[RFC0977]), UTF-8 is not encoded, but the UTF-16 family MUST be encoded in base64. For binary clean transports (e.g., HTTP[RFC2616]), no content-transfer-encoding is necessary.
application/vnd.ericsson.quickcall ======> None The material is binary and must be suitably encoded on non-binary transports.
application/vnd.groove-account ======> quoted-printable "This media type is mostly ASCII characters but also contains binary material. Quoted-printable is therefore the most appropriate choice for transports that cannot handle binary material directly."
application/vnd.groove-help ======> quoted-printable - This media type is mostly ASCII characters but also contains binary material. Quoted-printable is therefore the most appropriate choice for transports that cannot handle binary material directly.
application/vnd.groove-tool-message ======> quoted-printable "This media type is mostly ASCII characters but also contains binary material. Quoted-printable is therefore the most appropriate choice for transports that cannot handle binary material directly."
application/vnd.groove-identity-message ======> quoted-printable "This media type is mostly ASCII characters but also contains binary material. Quoted-printable is therefore the most appropriate choice for transports that cannot handle binary material directly."
application/vnd.groove-tool-template ======> quoted-printable "This media type is mostly ASCII characters but also contains binary material. Quoted-printable is therefore the most appropriate choice for transports that cannot handle binary material directly."
application/vnd.hbci ======> The encodings base64 or binary MUST be used.
application/vnd.hzn-3d-crossword ======> The data will be text which has been compressed using a lossless format, resulting in a binary format for the data.  The compression will be internal to the format, rather than an external module.
application/vnd.ibm.afplinedata ======> IBM's Line Data carries text and can also carry some of the data defined in IBM's Mixed Object Document Content Architecture (MO:DCA).  The MO:DCA data can be text, image, and graphics data objects. Therefore, IBM's Line Data can be a mixture of binary and character data.  The recommended content-transfer-encoding is base64.
application/vnd.ibm.modcap ======> MO:DCA-P carries text, image, and graphics data objects, therefore the data is a mixture of binary data and character data. The recommended content-transfer-encoding is base64.
application/vnd.llamagraphics.life-balance.exchange+xml ======> Because Life Balance supports Unicode, content data may need to be in UTF-16 as well as UTF-8.  As per RFC 3023: For 7-bit transports, data in either UTF-8 or UTF-16 MUST be encoded in quoted-printable or base64.  For 8-bit clean transport (e.g., 8BITMIME[RFC1652] ESMTP or NNTP[RFC0977]), UTF-8 is not encoded, but the UTF-16 family MUST be encoded in base64.  For binary clean transports (e.g., HTTP[RFC2616]), no content-transfer-encoding is necessary.
application/vnd.mediastation.cdkey ======> The CDKey(tm) file format is a text-based file format and should transfer fine in a binary or non-binary protocol.
application/vnd.MFER ======> MFER is binary, therefore it should be encoded using Content-Transfer-Encoding
application/vnd.Mobius.MBK ======> Mobius Basket files are not intended to be manually edited, and some lines may be longer than 1000 bytes. These files should be encoded using Content-Transfer-Encoding: binary.
application/vnd.Mobius.MSL ======> Scripts are recorded in the local natural language encoding and therefore may contain values greater than 127.  In rare cases, small amounts of non-executable binary data may occur. Some lines may be longer than 1000 bytes.  Thus quoted-printable encoding is the best encoding in most cases.
application/vnd.mseq ======> The content consists of 16 bit binary data that must be encoded on transports that cannot handle binary.
application/vnd.netfpx ======> binary data is transmitted; base64 generally preferred
application/vnd.pg.osasli ======> All the necessary information in this application is represented in BINARY format.
template application/vwg-multiplexed not found
application/vnd.rapid ======> Emultek's Rapid packaged applications are compressed in a signle file in binary format. Some encoding will be necessary for MIME mailers.
application/vnd.syncml.dm+xml ======> This media type MAY be encoded as appropriate for the charset and the capabilities of the underlying transport. For 7bit transports, data in both UTF-8 and UTF-16 is encoded in quoted- printable or base64. For 8-bit clean transport (e.g., ESMTP with 8BITMIME, NNTP), UTF-8 is not encoded, but UTF-16 is best base64 encoded. For binary clean transport (e.g., HTTP), no content-transfer-encoding is necessary.
application/vnd.syncml.dm+wbxml ======> This media type MAY be encoded as appropriate for the charset and the capabilities of the underlying transport. For 7bit transports, data in both UTF-8 and UTF-16 is encoded in quoted- printable or base64. For 8-bit clean transport (e.g., ESMTP with 8BITMIME, NNTP), UTF-8 is not encoded, but UTF-16 is best base64 encoded. For binary clean transport (e.g., HTTP), no content-transfer-encoding is necessary.
application/vnd.wap-wbxml ======> This is binary material and suitable encoding must be used when transferring over protocols that cannot handle binary.
application/xml ======> Depending on the character encoding used, XML MIME entities can consist of 7bit, 8bit or binary data [RFC6838].  For 7-bit transports, 7bit data, for example US-ASCII-encoded data, does not require content-transfer-encoding, but 8bit or binary data, for example UTF-8 or UTF-16 data, MUST be content-transfer-encoded in quoted-printable or base64.  For 8-bit clean transport (e.g. 8BITMIME ESMTP [RFC6152] or NNTP [RFC3977]), 7bit or 8bit data, for example US-ASCII or UTF-8 data, does not require content-transfer-encoding, but binary data, for example data with a UTF-16 encoding, MUST be content-transfer-encoded in base64. For binary clean transports (e.g.  BINARY ESMTP [RFC3030] or HTTP [HTTPbis]), no content-transfer-encoding is necessary (or even possible, in the case of HTTP) for 7bit, 8bit or binary data.
template audio/G721 not found
audio/vnd.cisco.nse ======> This MIME subtype is only defined for transfer via the Real Time Protocol (RTP) as defined in rfc1889. As such, it consists of packets of binary data. The packet format is the same as that for telephone events in rfc2833. The difference from rfc2833 events is that this MIME subtype  uses a separate name space for event numbers, with semantics defined by Cisco.
message/CPIM ======> Intended to be used in 8-bit clean environments, with non-transformative encoding (8-bit or binary, according to the content contained within the message;  the CPIM message headers can be handled in an 8-bit text environment). This content type could be used with a 7-bit transfer environment if appropriate transfer encoding is used.  NOTE that for this purpose, enclosed MIME content MUST BE treated as opaque data and encoded accordingly.  Any encoding must be reversed before any enclosed MIME content can be accessed.
message/global ======> Any content-transfer-encoding is permitted. The 8-bit or binary content-transfer-encodings are recommended where permitted.
message/http ======> only "7bit", "8bit", or "binary" are permitted
message/s-http ======> only "7bit", "8bit", or "binary" are permitted.
message/sip ======> SIP messages consist of an 8-bit header optionally followed by a binary MIME data object.  As such, SIP messages must be treated as binary.  Under normal circumstances SIP messages are transported over binary-capable transports, no special encodings are needed.
message/sipfrag ======> SIP messages consist of an 8-bit header optionally followed by a binary MIME data object. As such, SIP messages must be treated as binary. Under normal circumstances SIP messages are transported over binary-capable transports, no special encodings are needed.
model/vnd-dwf ======> This type contains three parts: a header, a body, and a terminator. The header is ASCII text that describes the file's creation date, author, filename, and other file details.  The body contains the descriptions of the vector geometry, and can be either binary or ASCII text, depending on how the the file is authored.  (Manually written DWF files will tend to be ASCII, software-generated DWF files will tend to be binary) The terminator is ASCII text and consists of a single EOF indicator.
model/vnd.parasolid.transmit-text ======> File content is mostly 7-bit US-ASCII text, only printable characters plus whitespace, but it can contain 8-bit characters on occasion (anything except NULL characters). Maximum line length is 80 characters (not including LF).  However, when written to disk the file always uses UNIX line-ending conventions: line endings are indicated by a single LF ("\n") character, regardless of the line-ending conventions used by the platform the file is being written on. As a result, both the 7-bit and 8-bit encodings are unsuitable, and the file must be treated as binary data. The best encoding to use is likely to be quoted-printable, since the file contents is mostly 7-bit ASCII; obviously base64 will work, but it will typically result in slightly larger message sizes than quoted-printable.
multipart/byteranges ======> only "7bit", "8bit", or "binary" are permitted
multipart/voice-message ======> 7bit, 8bit or Binary
text/dns ======> The data is textual and should be transfered in a line-oriented mode. Text literals may contain CRLF within the text. Binary transport is possible between systems that use the same end-of-line conventions. Master files are in general ASCII, but non-ASCII octet values may occur and are treated as opaque values by DNS software (compare RFC 1035, section 5). The master file format permits encoding arbitrary octet values by using the "\DDD" encoding. The use of "\DDD" encoding can be more reliable than transporting non-ASCII through MIME transports, if data passes through a gateway that re-encodes the character data.
text/csv ======> CSV MIME entities consist of binary data [RFC6838].  As per section 4.1.1. of RFC 2046 [RFC2046], this media type uses CRLF to denote line breaks.  However, implementers should be aware that some implementations may use other values.
text/vnd.motorola.reflex ======> This content may be binary and should be transfer encoded using base64 when a non-binary transfer protocol is used to propogate this content. The character set of the text is determined in an a priori manner between the originating wireless device and its associated service provider. For character sets that use only 7-bits per character, the text must be packed using the Pack7 transfer encoding scheme defined by FLEXsuite(tm).
text/xml ======> Depending on the character encoding used, XML MIME entities can consist of 7bit, 8bit or binary data [RFC6838].  For 7-bit transports, 7bit data, for example US-ASCII-encoded data, does not require content-transfer-encoding, but 8bit or binary data, for example UTF-8 or UTF-16 data, MUST be content-transfer-encoded in quoted-printable or base64.  For 8-bit clean transport (e.g. 8BITMIME ESMTP [RFC6152] or NNTP [RFC3977]), 7bit or 8bit data, for example US-ASCII or UTF-8 data, does not require content-transfer-encoding, but binary data, for example data with a UTF-16 encoding, MUST be content-transfer-encoded in base64. For binary clean transports (e.g.  BINARY ESMTP [RFC3030] or HTTP [HTTPbis]), no content-transfer-encoding is necessary (or even possible, in the case of HTTP) for 7bit, 8bit or binary data.
